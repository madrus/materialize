{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    posts/\n        Web-What.md # web what article\n    ...       # Other markdown pages, images and other files.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    posts/\n        Web-What.md # web what article\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/posts/Web-What/", 
            "text": "TL;DR --\n In this blog post, I share my personal story of how I discovered \nweb development\n and came to passionately\u00a0love it. Also about my mistakes and misconceptions along the way. It\u00a0is not\u00a0about the \"ultimate truth\" but\u00a0rather about my personal observations and perception.\n\n\nSo, it will probably be more interesting to you\u00a0if you\u00a0are now\u00a0in a similar situation to the one I was in\u00a0at the beginning of the way. It was a long way\u00a0and it took me\u00a0at least a year to come to understand\u00a0what\u00a0web development was all\u00a0about.\u00a0I will be very\u00a0happy if my story\u00a0helps you\u00a0to shorten yours. \n:)\n And, of course, your comments are more than welcome.\n\n\n\n\nHello, Reader. My name is\u00a0Andr\u00e9 Roussakoff. At the moment of writing this post, I am\u00a057 and\u00a0I have never in my life had a blog of my own. I have never\u00a0realized that it would be so hard to begin. There is so much to say and\u00a0I have yet no clear understanding of what my blog will finally look like. Only that I have to start.\n\n\nI have been an application developer for many years, mostly developing the backend applications and SQL databases. Working mostly with\u00a0.NET and C#.\u00a0I had no\u00a0clear notion\u00a0of\u00a0the existence of web development as profession. Websites\u00a0fascinated me by their\u00a0beauty and style. Creating websites I called \nweb design\n\u00a0and I thought that it had everything to do with creative art and Photoshop skills.\u00a0Being an application\u00a0developer, I had a feeling that it lay outside of\u00a0my profession.\n\n\nUntil several years ago. Then one day\u00a0I was confronted with the necessity to create a website for a good\u00a0acquaintance of mine. \u00a0Somebody mentioned CMS as a tool to create websites and I started my research about CMS. Of course, the most popular were \nWordPress\n and \nJoomla!\n. Unfortunately, both packages\u00a0were written in PHP and I was in no\u00a0hurry to learn another programming language even before I\u00a0have\u00a0created my first website. I must admit that\u00a0I failed at the latter anyway\u00a0because just using the standard menu options, I was never\u00a0quite satisfied with the results.\n\n\nSeparation of Concerns\n\n\nHowever,\u00a0that CMS\u00a0research on the positive side gave me the notion of \nseparation of concerns\n. That\u00a0when thinking about a\u00a0website, one has to consider\u00a0these\u00a0four notions:\n\n\n\n\nForm\n (structure and presentation)\n\n\nStyle\n (CSS)\n\n\nContent\n (information)\n\n\nBehavior\n (UX)\n\n\n\n\nand that these can be treated rather\u00a0independently of each other. That was a breakthrough because I suddenly saw a bridge\u00a0to the world of OOP (Object Oriented Programming), which was very familiar to me and that one does not have to do all at once.\nWith it also came the realization that my understanding\u00a0of the notion of web design covered but a\u00a0small piece of the whole\u00a0story. That in terms of activities related to the website creation, we can distinguish (at least)\u00a0the following three:\n\n\n\n\nweb design\n\u00a0\n\n\nweb development\n\n\ncontent management\n\n\n\n\nWeb design\u00a0has indeed\u00a0a lot to do with\u00a0artistic creativity.\u00a0Web development has to do with\u00a0tons and tons\u00a0of programming. And\u00a0content management is the main responsibility of\u00a0the\u00a0actual website owner.\n\n\nAt this point, I decided to look deeper into web development.\u00a0To my utter amazement the deeper I looked, the more there was to learn and the more confusing it all seemed.\u00a0In Holland, we\u00a0have a saying: \n\"Among all the trees, one does\u00a0not see the forest\"\n. That was definitely true to say\u00a0about me at that moment. Even now to some extent, I must admit, although I begin to have my preferences.\n\n\nWeb Development\n\n\nZooming further\u00a0in on web development, I discovered there were two major areas of it:\n\n\n\n\nfront-end or client side\u00a0development\n\n\nback-end or server side\u00a0development\n\n\n\n\nand those developers\u00a0who are doing both\u00a0often talk about their\u00a0work as\n\n\n\n\nfull stack website development\n\n\n\n\nFront-end development has more to do with the visible to visitors\u00a0part of the website, like menus, animations,\u00a0complex\u00a0UX tricks, DOM manipulations, etc.\n\n\nBack-end development has more to do with the \"invisible\" activities, like user authentication and authorization, HTTP requests handling, data and database\u00a0manipulation.\n\n\nWebsites vs Apps\n\n\nThe next \"tree\" was the realization that mobile devices like smartphones and tablets often\u00a0require a special approach and that apps we download for an app store\u00a0are\u00a0not the websites we browse on our PC or notebook screen. One can distinguish roughly four types of apps:\n\n\n\n\nweb apps\n\n\nnative\u00a0apps\n\n\nmobile apps\n\n\nhybrid apps\n\n\n\n\nA \nweb app\n is, in fact, nothing more than\u00a0a classic website, which we view on a mobile device using any installed browser.\n\n\nA \nnative app\n needs first to be registered within an app store like Windows Store, Apple Store or Google Play. Only after that we can download it and install on our mobile device. Thus, a\u00a0native app is not a website\u00a0but an application.\n\n\nA \nmobile app\n is a\u00a0web app that\u00a0has such look and feel that, when started,\u00a0it is practically undistinguishable from a native app.\n\n\nFinally, a \nhybrid app\n combines the features of both worlds, web and native,\u00a0and can access the mobile device's hardware. E.g. imagine an app in an app store, which is a wrapper around a classic website. Or a cross-browser app, which is customized to work on mobile\u00a0devices independent\u00a0of\u00a0its platform.\n\n\nOne special sort of apps is a\u00a0\nSPA\n (Single Page Application).\u00a0A\u00a0SPA has\u00a0look and feel of\u00a0a website or a\u00a0native app with many pages and menu et al. Whereas technically it is\u00a0all the time\u00a0one and the same page object,\u00a0only its elements\u00a0are in-place\u00a0replaced by\u00a0new elements depending on the user action. E.g. the next image replaces the previous image or the content of another page replaces the content of the current page. And due to caching\u00a0this can happen even without communication between the client and the server.\n\n\nDifferent Platforms\n\n\nThe next \"tree\" came as a shock. Being a .NET developer I was supposed to \"hate\" all things Java because all Java developers \"hate\" all things .NET. \n:)\n Also, being a Windows developer I was supposed to \"hate\" all things\u00a0Android or macOS. Same reason. All this was quite difficult\u00a0to digest. Yet, maybe 90% of all mobile devices in the world\u00a0are not on Windows platform. Have I landed in the wrong camp without even noticing it? The obvious answer seems to be\u00a0\"yes\", isn't it?\n\n\nOn the other hand, one can ask another question: should I switch camps at the age of 57? Would it be\u00a0reasonable and feasible? Fortunately for me, Microsoft seems to also have realized this gap and the hard\u00a0choice that many\u00a0a Windows developer was\u00a0facing because of its previous\u00a0policy.\n\n\nAs of last year, Microsoft came up with a number of new tools. It\u00a0went open source with ASP.NET 5 (a.k.a. ASP.NET Core), MVC 6 and Entity Framework 7. It became partners with Cordova\u00a0for the possibility of cross-platform development under Windows. And it brought out a wonderful light-weight code editor, Visual Studio Code (\nVSCode\n), which is absolutely\u00a0NOT a clone of Visual Studio\u00a0but\u00a0rather a brother of such editors as Atom, Brackets or Sublime Text and even\u00a0works on Linux and macOS.\n\n\nAt the same time, I have found out that I can run some traditional Linux/macOS tools under Windows like Nodejs.\n\n\nAs a developer, having all these tools at my disposal,\u00a0\u00a0I don't feel in any way\u00a0limited by Windows platform as to the kind of web development I can do, now or in future.\n\n\nYippee! I don't have to switch the platform! \n:)\n\n\nJavaScript, the Language of the Web\n\n\nTurning around, the next \"tree\" was JavaScript. JavaScript for me\u00a0started at the very early stage of CMS\u00a0research when my web\u00a0world consisted of WordPress and Joomla!.\u00a0As soon as I\u00a0saw\u00a0some basic \njQuery\n scripting,\u00a0I\u00a0almost immediately came across\u00a0this\u00a0advice (in my free interpretation):\n\n\n\n\nAvoid using jQuery or\u00a0JavaScript as much as possible, because inadequate code can completely\u00a0ruin the website performance.\n\n\n\n\nAt first, it sounded reasonable and for some time\u00a0I did indeed\u00a0avoid anything to do with it.\u00a0Probably for a\u00a0non-developer, it is a reasonable thing to do. But for me, the more I saw of JavaScript here and there, the more I came to love it and the more wonderful things I saw it can make rather than break.\u00a0So, I learned myself some JavaScript.\n\n\nAnd with that, I perceived a\u00a0whole new world previously completely unknown to me. I am talking about myriad of\u00a0different JavaScript frameworks and libraries, like \nNodejs\n, \nAngular\n, \nAurelia\n, \nReact\n, \nBackbone\n, \nUnderscore\n and \nLodash\n, \nExpress\n and \nHapi\n, \nGulp\n, \nGrunt\n,\u00a0\nIonic\n, \nSignalr\n, \nKarma\n, \nJasmine\n, \nMocha\n, \nSelenium\n\u00a0-\u00a0you name it. Even the names themselves are beautiful to say nothing of what these tools\u00a0are capable of!\n\n\nThe most important discovery was that it is practically unthinkable to do web development\u00a0without HEAVY\u00a0use of JavaScript. Talking about that advice to avoid it as much as possible! \n:)\n\n\nMVC\u00a0and REST API\n\n\nIn this final part of the article, I want to talk about the concept of \nseparation of concerns\n that I have\u00a0mentioned earlier and in a very different\u00a0context.\u00a0When talking about CMS, this separation was related to\u00a0Form, Style, Content and Behavior.\u00a0Now, I realize\u00a0that\u00a0on a lower, more technical level this \"external\" separation of concerns can be\u00a0hard coupled with the beautiful\u00a0\nMVC\n\u00a0(Model-View-Controller) paradigm. MVC relates to the way we structure our code\u00a0in terms of responsibilities and it\u00a0determines the\u00a0division between:\n\n\n\n\nModel\n\u00a0(representation of the data structure)\n\n\nView\n\u00a0(the way to present the information to the user)\n\n\nController\n\u00a0(application logic behind the scenes which binds Views and Models together)\n\n\n\n\nOn the client side\n, everything can be written in plain\u00a0JavaScript but it is probably much easier to use some\u00a0specialized JavaScript framework of library. My impression is that at\u00a0the moment, the most popular framework for client side development seems to be\u00a0\nAngular\n with \nReact\n only a half step behind,\u00a0although my personal\u00a0beauty prize goes to \nAurelia\n.\n\n\nAngular\n\u00a0has also such\u00a0advantage that, in combination with \nIonic\n framework,\u00a0it\u00a0makes it easier to create cross-platform apps.\u00a0And as to \nReact\n, it is the Facebook's main development tool.\n\n\nIn the earlier versions of ASP.NET MVC, Microsoft used out-of-the-box no JavaScript for client side development.\u00a0The clients had to send AJAX requests to the server. The response was\u00a0composed on the server and after that\u00a0sent to the client.\u00a0With the corresponding performance penalty. On the other hand, the standard tool for the development of views is \nRazor\n. This fantastic tool makes it possible to combine HTML code with C# snippets, so that we can manipulate HTML tags based on\u00a0C# variables and use conditional logic and loops. Recently, I came across a wonderful \nUmbraco\n\u00a0CMS, which became my second love in the world of web development, the first being \nAurelia\n. Umbraco CMS\u00a0is\u00a0free,\u00a0is\u00a0based on ASP.NET MVC 4, and it uses Angular on the client side.\n\n\nOn the server side\n, I have discovered the wonderful world of \nRESTful\u00a0API\n. Simply explained, it is a two-way\u00a0translation between the URL string composition and the corresponding\u00a0action that\u00a0has to be executed. Here is a couple of trivial examples how a \nRESTful API\n could look like:\n\n\n\n\nhttp://website.com\n\u00a0 -\u00a0show home page\n\n\nhttp://website.com/articles\n \u00a0- show list of articles\n\n\nhttp://website.com/articles/1\n \u00a0- show or update article with id = 1\n\n\n\n\nRESTful API\n can be implemented in a lot of different ways: with \nJavaScript\n (e.g. Nodejs + Express) or\u00a0with \nC#/ASP.NET\n.\n\n\nAlso, it is now possible to develop with JavaScript inside the Visual Studio 2015, or alternatively develop completely outside of Visual Studio using VSCode on any platform, Windows, Linux or macOS, and even run natively\u00a0C# code on all of\u00a0them using OmniSharp!\n\n\nRound up\n\n\nSurprisingly, it has become quite\u00a0a big article, over 2000 words. I have told you about the different steps I had gone through before I had discovered the \"forest\" of\u00a0web development as my new love.\u00a0Although there are so many different puzzle pieces in the web development picture, there some important binding concepts that keep it all together and give me the feeling of beauty.\n\n\n\n\nthe most important central notion of \nseparation of concerns\n (both in CMS and MVC)\n\n\nthe possibility to use \nsame toolset\n for different aims (different apps and SPAs), so everything become more accessible and understandable\n\n\nMicrosoft going open source\n with the latest\u00a0release of ASP.NET, MVC and Entity Framework and its support for traditional Linux/macOS tooling as well, so no\u00a0necessity to switch to Java camp\n\n\nhuge open source community\n behind all of this, which made it possible for me to come this far and maybe even inspired me to write this article\n\n\n\n\nThis is by far\u00a0not the end of the way! It is only the first step. From complete illiteracy to learning to read and\u00a0understand something of what I have read. A much more difficult step is the next one: learning to write. Meaning developing complete projects from A to Z and thus using the tools I have learned.\n\n\nI believe I have yet to add a link here and there in case somebody becomes interested to go into more details on some tool or framework, although Google search also can help.\n\n\nThank you, the Reader, for coming this far. If there is anything at all that you could add as feedback on this article, please do. Be it positive or negative. I will accept it thankfully.", 
            "title": "Web What"
        }, 
        {
            "location": "/posts/Web-What/#separation-of-concerns", 
            "text": "However,\u00a0that CMS\u00a0research on the positive side gave me the notion of  separation of concerns . That\u00a0when thinking about a\u00a0website, one has to consider\u00a0these\u00a0four notions:   Form  (structure and presentation)  Style  (CSS)  Content  (information)  Behavior  (UX)   and that these can be treated rather\u00a0independently of each other. That was a breakthrough because I suddenly saw a bridge\u00a0to the world of OOP (Object Oriented Programming), which was very familiar to me and that one does not have to do all at once.\nWith it also came the realization that my understanding\u00a0of the notion of web design covered but a\u00a0small piece of the whole\u00a0story. That in terms of activities related to the website creation, we can distinguish (at least)\u00a0the following three:   web design \u00a0  web development  content management   Web design\u00a0has indeed\u00a0a lot to do with\u00a0artistic creativity.\u00a0Web development has to do with\u00a0tons and tons\u00a0of programming. And\u00a0content management is the main responsibility of\u00a0the\u00a0actual website owner.  At this point, I decided to look deeper into web development.\u00a0To my utter amazement the deeper I looked, the more there was to learn and the more confusing it all seemed.\u00a0In Holland, we\u00a0have a saying:  \"Among all the trees, one does\u00a0not see the forest\" . That was definitely true to say\u00a0about me at that moment. Even now to some extent, I must admit, although I begin to have my preferences.", 
            "title": "Separation of Concerns"
        }, 
        {
            "location": "/posts/Web-What/#web-development", 
            "text": "Zooming further\u00a0in on web development, I discovered there were two major areas of it:   front-end or client side\u00a0development  back-end or server side\u00a0development   and those developers\u00a0who are doing both\u00a0often talk about their\u00a0work as   full stack website development   Front-end development has more to do with the visible to visitors\u00a0part of the website, like menus, animations,\u00a0complex\u00a0UX tricks, DOM manipulations, etc.  Back-end development has more to do with the \"invisible\" activities, like user authentication and authorization, HTTP requests handling, data and database\u00a0manipulation.", 
            "title": "Web Development"
        }, 
        {
            "location": "/posts/Web-What/#websites-vs-apps", 
            "text": "The next \"tree\" was the realization that mobile devices like smartphones and tablets often\u00a0require a special approach and that apps we download for an app store\u00a0are\u00a0not the websites we browse on our PC or notebook screen. One can distinguish roughly four types of apps:   web apps  native\u00a0apps  mobile apps  hybrid apps   A  web app  is, in fact, nothing more than\u00a0a classic website, which we view on a mobile device using any installed browser.  A  native app  needs first to be registered within an app store like Windows Store, Apple Store or Google Play. Only after that we can download it and install on our mobile device. Thus, a\u00a0native app is not a website\u00a0but an application.  A  mobile app  is a\u00a0web app that\u00a0has such look and feel that, when started,\u00a0it is practically undistinguishable from a native app.  Finally, a  hybrid app  combines the features of both worlds, web and native,\u00a0and can access the mobile device's hardware. E.g. imagine an app in an app store, which is a wrapper around a classic website. Or a cross-browser app, which is customized to work on mobile\u00a0devices independent\u00a0of\u00a0its platform.  One special sort of apps is a\u00a0 SPA  (Single Page Application).\u00a0A\u00a0SPA has\u00a0look and feel of\u00a0a website or a\u00a0native app with many pages and menu et al. Whereas technically it is\u00a0all the time\u00a0one and the same page object,\u00a0only its elements\u00a0are in-place\u00a0replaced by\u00a0new elements depending on the user action. E.g. the next image replaces the previous image or the content of another page replaces the content of the current page. And due to caching\u00a0this can happen even without communication between the client and the server.", 
            "title": "Websites vs Apps"
        }, 
        {
            "location": "/posts/Web-What/#different-platforms", 
            "text": "The next \"tree\" came as a shock. Being a .NET developer I was supposed to \"hate\" all things Java because all Java developers \"hate\" all things .NET.  :)  Also, being a Windows developer I was supposed to \"hate\" all things\u00a0Android or macOS. Same reason. All this was quite difficult\u00a0to digest. Yet, maybe 90% of all mobile devices in the world\u00a0are not on Windows platform. Have I landed in the wrong camp without even noticing it? The obvious answer seems to be\u00a0\"yes\", isn't it?  On the other hand, one can ask another question: should I switch camps at the age of 57? Would it be\u00a0reasonable and feasible? Fortunately for me, Microsoft seems to also have realized this gap and the hard\u00a0choice that many\u00a0a Windows developer was\u00a0facing because of its previous\u00a0policy.  As of last year, Microsoft came up with a number of new tools. It\u00a0went open source with ASP.NET 5 (a.k.a. ASP.NET Core), MVC 6 and Entity Framework 7. It became partners with Cordova\u00a0for the possibility of cross-platform development under Windows. And it brought out a wonderful light-weight code editor, Visual Studio Code ( VSCode ), which is absolutely\u00a0NOT a clone of Visual Studio\u00a0but\u00a0rather a brother of such editors as Atom, Brackets or Sublime Text and even\u00a0works on Linux and macOS.  At the same time, I have found out that I can run some traditional Linux/macOS tools under Windows like Nodejs.  As a developer, having all these tools at my disposal,\u00a0\u00a0I don't feel in any way\u00a0limited by Windows platform as to the kind of web development I can do, now or in future.  Yippee! I don't have to switch the platform!  :)", 
            "title": "Different Platforms"
        }, 
        {
            "location": "/posts/Web-What/#javascript-the-language-of-the-web", 
            "text": "Turning around, the next \"tree\" was JavaScript. JavaScript for me\u00a0started at the very early stage of CMS\u00a0research when my web\u00a0world consisted of WordPress and Joomla!.\u00a0As soon as I\u00a0saw\u00a0some basic  jQuery  scripting,\u00a0I\u00a0almost immediately came across\u00a0this\u00a0advice (in my free interpretation):   Avoid using jQuery or\u00a0JavaScript as much as possible, because inadequate code can completely\u00a0ruin the website performance.   At first, it sounded reasonable and for some time\u00a0I did indeed\u00a0avoid anything to do with it.\u00a0Probably for a\u00a0non-developer, it is a reasonable thing to do. But for me, the more I saw of JavaScript here and there, the more I came to love it and the more wonderful things I saw it can make rather than break.\u00a0So, I learned myself some JavaScript.  And with that, I perceived a\u00a0whole new world previously completely unknown to me. I am talking about myriad of\u00a0different JavaScript frameworks and libraries, like  Nodejs ,  Angular ,  Aurelia ,  React ,  Backbone ,  Underscore  and  Lodash ,  Express  and  Hapi ,  Gulp ,  Grunt ,\u00a0 Ionic ,  Signalr ,  Karma ,  Jasmine ,  Mocha ,  Selenium \u00a0-\u00a0you name it. Even the names themselves are beautiful to say nothing of what these tools\u00a0are capable of!  The most important discovery was that it is practically unthinkable to do web development\u00a0without HEAVY\u00a0use of JavaScript. Talking about that advice to avoid it as much as possible!  :)", 
            "title": "JavaScript, the Language of the Web"
        }, 
        {
            "location": "/posts/Web-What/#mvc-and-rest-api", 
            "text": "In this final part of the article, I want to talk about the concept of  separation of concerns  that I have\u00a0mentioned earlier and in a very different\u00a0context.\u00a0When talking about CMS, this separation was related to\u00a0Form, Style, Content and Behavior.\u00a0Now, I realize\u00a0that\u00a0on a lower, more technical level this \"external\" separation of concerns can be\u00a0hard coupled with the beautiful\u00a0 MVC \u00a0(Model-View-Controller) paradigm. MVC relates to the way we structure our code\u00a0in terms of responsibilities and it\u00a0determines the\u00a0division between:   Model \u00a0(representation of the data structure)  View \u00a0(the way to present the information to the user)  Controller \u00a0(application logic behind the scenes which binds Views and Models together)   On the client side , everything can be written in plain\u00a0JavaScript but it is probably much easier to use some\u00a0specialized JavaScript framework of library. My impression is that at\u00a0the moment, the most popular framework for client side development seems to be\u00a0 Angular  with  React  only a half step behind,\u00a0although my personal\u00a0beauty prize goes to  Aurelia .  Angular \u00a0has also such\u00a0advantage that, in combination with  Ionic  framework,\u00a0it\u00a0makes it easier to create cross-platform apps.\u00a0And as to  React , it is the Facebook's main development tool.  In the earlier versions of ASP.NET MVC, Microsoft used out-of-the-box no JavaScript for client side development.\u00a0The clients had to send AJAX requests to the server. The response was\u00a0composed on the server and after that\u00a0sent to the client.\u00a0With the corresponding performance penalty. On the other hand, the standard tool for the development of views is  Razor . This fantastic tool makes it possible to combine HTML code with C# snippets, so that we can manipulate HTML tags based on\u00a0C# variables and use conditional logic and loops. Recently, I came across a wonderful  Umbraco \u00a0CMS, which became my second love in the world of web development, the first being  Aurelia . Umbraco CMS\u00a0is\u00a0free,\u00a0is\u00a0based on ASP.NET MVC 4, and it uses Angular on the client side.  On the server side , I have discovered the wonderful world of  RESTful\u00a0API . Simply explained, it is a two-way\u00a0translation between the URL string composition and the corresponding\u00a0action that\u00a0has to be executed. Here is a couple of trivial examples how a  RESTful API  could look like:   http://website.com \u00a0 -\u00a0show home page  http://website.com/articles  \u00a0- show list of articles  http://website.com/articles/1  \u00a0- show or update article with id = 1   RESTful API  can be implemented in a lot of different ways: with  JavaScript  (e.g. Nodejs + Express) or\u00a0with  C#/ASP.NET .  Also, it is now possible to develop with JavaScript inside the Visual Studio 2015, or alternatively develop completely outside of Visual Studio using VSCode on any platform, Windows, Linux or macOS, and even run natively\u00a0C# code on all of\u00a0them using OmniSharp!", 
            "title": "MVC\u00a0and REST API"
        }, 
        {
            "location": "/posts/Web-What/#round-up", 
            "text": "Surprisingly, it has become quite\u00a0a big article, over 2000 words. I have told you about the different steps I had gone through before I had discovered the \"forest\" of\u00a0web development as my new love.\u00a0Although there are so many different puzzle pieces in the web development picture, there some important binding concepts that keep it all together and give me the feeling of beauty.   the most important central notion of  separation of concerns  (both in CMS and MVC)  the possibility to use  same toolset  for different aims (different apps and SPAs), so everything become more accessible and understandable  Microsoft going open source  with the latest\u00a0release of ASP.NET, MVC and Entity Framework and its support for traditional Linux/macOS tooling as well, so no\u00a0necessity to switch to Java camp  huge open source community  behind all of this, which made it possible for me to come this far and maybe even inspired me to write this article   This is by far\u00a0not the end of the way! It is only the first step. From complete illiteracy to learning to read and\u00a0understand something of what I have read. A much more difficult step is the next one: learning to write. Meaning developing complete projects from A to Z and thus using the tools I have learned.  I believe I have yet to add a link here and there in case somebody becomes interested to go into more details on some tool or framework, although Google search also can help.  Thank you, the Reader, for coming this far. If there is anything at all that you could add as feedback on this article, please do. Be it positive or negative. I will accept it thankfully.", 
            "title": "Round up"
        }
    ]
}